package com.zmen.backend.controller;

import com.zmen.backend.entity.User;
import com.zmen.backend.entity.DiaChiNguoiDung;
import com.zmen.backend.repository.UserRepository;
import com.zmen.backend.repository.DiaChiNguoiDungRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/user/addresses")
@Tag(name = "Address Management", description = "APIs for user address management")
@CrossOrigin(origins = "*")
public class AddressController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private DiaChiNguoiDungRepository diaChiRepository;

    @Operation(summary = "Get user addresses", description = "Get all addresses of current user")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Addresses retrieved successfully"),
        @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    @GetMapping
    public ResponseEntity<?> getUserAddresses() {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username = auth.getName();
            
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            List<DiaChiNguoiDung> addresses = diaChiRepository.findByNguoiDungAndTrangThaiTrue(user);
            
            List<Map<String, Object>> addressList = addresses.stream().map(addr -> {
                Map<String, Object> addressMap = new HashMap<>();
                addressMap.put("id", addr.getId());
                addressMap.put("tenDiaChi", addr.getTenDiaChi());
                addressMap.put("hoTenNguoiNhan", addr.getHoTenNguoiNhan());
                addressMap.put("soDienThoai", addr.getSoDienThoai());
                addressMap.put("diaChiChiTiet", addr.getDiaChiChiTiet());
                addressMap.put("phuongXa", addr.getPhuongXa());
                addressMap.put("quanHuyen", addr.getQuanHuyen());
                addressMap.put("tinhThanhPho", addr.getTinhThanhPho());
                addressMap.put("maBuuDien", addr.getMaBuuDien());
                addressMap.put("loaiDiaChi", addr.getLoaiDiaChi());
                addressMap.put("laDiaChiMacDinh", addr.getLaDiaChiMacDinh());
                addressMap.put("createdAt", addr.getCreatedAt());
                return addressMap;
            }).collect(Collectors.toList());
            
            return ResponseEntity.ok(Map.of(
                "addresses", addressList,
                "total", addressList.size()
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Failed to get addresses: " + e.getMessage()));
        }
    }

    @Operation(summary = "Get address by ID", description = "Get specific address by ID")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Address retrieved successfully"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "404", description = "Address not found")
    })
    @GetMapping("/{id}")
    public ResponseEntity<?> getAddressById(@Parameter(description = "Address ID") @PathVariable Long id) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username = auth.getName();
            
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            Optional<DiaChiNguoiDung> addressOpt = diaChiRepository.findByNguoiDungIdAndIdAndTrangThaiTrue(user.getId(), id);
            
            if (!addressOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            DiaChiNguoiDung addr = addressOpt.get();
            Map<String, Object> addressMap = new HashMap<>();
            addressMap.put("id", addr.getId());
            addressMap.put("tenDiaChi", addr.getTenDiaChi());
            addressMap.put("hoTenNguoiNhan", addr.getHoTenNguoiNhan());
            addressMap.put("soDienThoai", addr.getSoDienThoai());
            addressMap.put("diaChiChiTiet", addr.getDiaChiChiTiet());
            addressMap.put("phuongXa", addr.getPhuongXa());
            addressMap.put("quanHuyen", addr.getQuanHuyen());
            addressMap.put("tinhThanhPho", addr.getTinhThanhPho());
            addressMap.put("maBuuDien", addr.getMaBuuDien());
            addressMap.put("loaiDiaChi", addr.getLoaiDiaChi());
            addressMap.put("laDiaChiMacDinh", addr.getLaDiaChiMacDinh());
            addressMap.put("createdAt", addr.getCreatedAt());
            
            return ResponseEntity.ok(addressMap);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Failed to get address: " + e.getMessage()));
        }
    }

    @Operation(summary = "Create new address", description = "Create a new address for current user")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Address created successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        @ApiResponse(responseCode = "401", description = "Unauthorized")
    })
    @PostMapping
    public ResponseEntity<?> createAddress(@RequestBody Map<String, Object> addressData) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username = auth.getName();
            
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            
            // Validate required fields
            String tenDiaChi = (String) addressData.get("tenDiaChi");
            String hoTenNguoiNhan = (String) addressData.get("hoTenNguoiNhan");
            String soDienThoai = (String) addressData.get("soDienThoai");
            String diaChiChiTiet = (String) addressData.get("diaChiChiTiet");
            String phuongXa = (String) addressData.get("phuongXa");
            String quanHuyen = (String) addressData.get("quanHuyen");
            String tinhThanhPho = (String) addressData.get("tinhThanhPho");
            
            if (tenDiaChi == null || hoTenNguoiNhan == null || soDienThoai == null || 
                diaChiChiTiet == null || phuongXa == null || quanHuyen == null || tinhThanhPho == null) {
                return ResponseEntity.badRequest().body(Map.of("error", "Missing required fields"));
            }
            
            DiaChiNguoiDung address = new DiaChiNguoiDung(user, tenDiaChi, hoTenNguoiNhan, 
                soDienThoai, diaChiChiTiet, phuongXa, quanHuyen, tinhThanhPho);
            
            if (addressData.containsKey("maBuuDien")) {
                address.setMaBuuDien((String) addressData.get("maBuuDien"));
            }
            if (addressData.containsKey("loaiDiaChi")) {
                address.setLoaiDiaChi((String) addressData.get("loaiDiaChi"));
            }
            
            // Handle default address
            Boolean isDefault = (Boolean) addressData.get("laDiaChiMacDinh");
            if (isDefault != null && isDefault) {
                // Remove default from other addresses
                Optional<DiaChiNguoiDung> currentDefault = diaChiRepository.findByNguoiDungAndLaDiaChiMacDinhTrue(user);
                if (currentDefault.isPresent()) {
                    currentDefault.get().setLaDiaChiMacDinh(false);
                    diaChiRepository.save(currentDefault.get());
                }
                address.setLaDiaChiMacDinh(true);
            } else {
                // If this is the first address, make it default
                long addressCount = diaChiRepository.countByNguoiDungAndTrangThaiTrue(user);
                if (addressCount == 0) {
                    address.setLaDiaChiMacDinh(true);
                }
            }
            
            DiaChiNguoiDung savedAddress = diaChiRepository.save(address);
            
            return ResponseEntity.status(201).body(Map.of(
                "message", "Address created successfully",
                "addressId", savedAddress.getId()
            ));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Failed to create address: " + e.getMessage()));
        }
    }

    @Operation(summary = "Update address", description = "Update existing address")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Address updated successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "404", description = "Address not found")
    })
    @PutMapping("/{id}")
    public ResponseEntity<?> updateAddress(@Parameter(description = "Address ID") @PathVariable Long id, 
                                         @RequestBody Map<String, Object> addressData) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username = auth.getName();
            
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            Optional<DiaChiNguoiDung> addressOpt = diaChiRepository.findByNguoiDungIdAndIdAndTrangThaiTrue(user.getId(), id);
            
            if (!addressOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            DiaChiNguoiDung address = addressOpt.get();
            
            // Update fields if provided
            if (addressData.containsKey("tenDiaChi")) {
                address.setTenDiaChi((String) addressData.get("tenDiaChi"));
            }
            if (addressData.containsKey("hoTenNguoiNhan")) {
                address.setHoTenNguoiNhan((String) addressData.get("hoTenNguoiNhan"));
            }
            if (addressData.containsKey("soDienThoai")) {
                address.setSoDienThoai((String) addressData.get("soDienThoai"));
            }
            if (addressData.containsKey("diaChiChiTiet")) {
                address.setDiaChiChiTiet((String) addressData.get("diaChiChiTiet"));
            }
            if (addressData.containsKey("phuongXa")) {
                address.setPhuongXa((String) addressData.get("phuongXa"));
            }
            if (addressData.containsKey("quanHuyen")) {
                address.setQuanHuyen((String) addressData.get("quanHuyen"));
            }
            if (addressData.containsKey("tinhThanhPho")) {
                address.setTinhThanhPho((String) addressData.get("tinhThanhPho"));
            }
            if (addressData.containsKey("maBuuDien")) {
                address.setMaBuuDien((String) addressData.get("maBuuDien"));
            }
            if (addressData.containsKey("loaiDiaChi")) {
                address.setLoaiDiaChi((String) addressData.get("loaiDiaChi"));
            }
            
            // Handle default address change
            Boolean isDefault = (Boolean) addressData.get("laDiaChiMacDinh");
            if (isDefault != null && isDefault && !address.getLaDiaChiMacDinh()) {
                // Remove default from other addresses
                Optional<DiaChiNguoiDung> currentDefault = diaChiRepository.findByNguoiDungAndLaDiaChiMacDinhTrue(user);
                if (currentDefault.isPresent()) {
                    currentDefault.get().setLaDiaChiMacDinh(false);
                    diaChiRepository.save(currentDefault.get());
                }
                address.setLaDiaChiMacDinh(true);
            }
            
            diaChiRepository.save(address);
            
            return ResponseEntity.ok(Map.of("message", "Address updated successfully"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Failed to update address: " + e.getMessage()));
        }
    }

    @Operation(summary = "Delete address", description = "Delete existing address")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Address deleted successfully"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "404", description = "Address not found")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteAddress(@Parameter(description = "Address ID") @PathVariable Long id) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username = auth.getName();
            
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            Optional<DiaChiNguoiDung> addressOpt = diaChiRepository.findByNguoiDungIdAndIdAndTrangThaiTrue(user.getId(), id);
            
            if (!addressOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            DiaChiNguoiDung address = addressOpt.get();
            
            // Soft delete
            address.setTrangThai(false);
            diaChiRepository.save(address);
            
            // If this was the default address, make another one default
            if (address.getLaDiaChiMacDinh()) {
                List<DiaChiNguoiDung> remainingAddresses = diaChiRepository.findByNguoiDungAndTrangThaiTrue(user);
                if (!remainingAddresses.isEmpty()) {
                    remainingAddresses.get(0).setLaDiaChiMacDinh(true);
                    diaChiRepository.save(remainingAddresses.get(0));
                }
            }
            
            return ResponseEntity.ok(Map.of("message", "Address deleted successfully"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Failed to delete address: " + e.getMessage()));
        }
    }

    @Operation(summary = "Set default address", description = "Set an address as default")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Default address set successfully"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "404", description = "Address not found")
    })
    @PutMapping("/{id}/set-default")
    public ResponseEntity<?> setDefaultAddress(@Parameter(description = "Address ID") @PathVariable Long id) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String username = auth.getName();
            
            Optional<User> userOpt = userRepository.findByUsername(username);
            if (!userOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            User user = userOpt.get();
            Optional<DiaChiNguoiDung> addressOpt = diaChiRepository.findByNguoiDungIdAndIdAndTrangThaiTrue(user.getId(), id);
            
            if (!addressOpt.isPresent()) {
                return ResponseEntity.notFound().build();
            }
            
            // Remove default from current default address
            Optional<DiaChiNguoiDung> currentDefault = diaChiRepository.findByNguoiDungAndLaDiaChiMacDinhTrue(user);
            if (currentDefault.isPresent()) {
                currentDefault.get().setLaDiaChiMacDinh(false);
                diaChiRepository.save(currentDefault.get());
            }
            
            // Set new default
            DiaChiNguoiDung address = addressOpt.get();
            address.setLaDiaChiMacDinh(true);
            diaChiRepository.save(address);
            
            return ResponseEntity.ok(Map.of("message", "Default address set successfully"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Failed to set default address: " + e.getMessage()));
        }
    }
}

